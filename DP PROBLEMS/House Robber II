#include <bits/stdc++.h> 
long long  maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
    // vector<int>dp(nums.size(),-1);
    // return helper(nums.size()-1,nums,dp);
    // vector<int>dp(nums.size(),0);
    // dp[0]=nums[0];
    long long prev=nums[0];
    long long prev2=0;
    for(int ind=1;ind<nums.size();ind++){
    long long option1=nums[ind];
    if(ind>=2)
    option1+=prev2;
 long long option2=0+prev;
    // dp[ind]=max(option1,option2);
    long long curr=max(option1,option2);
    prev2=prev;
    prev=curr;
        
    }
    return prev;

}
long long int houseRobber(vector<int> &valueInHouse) {
  // Write your code here.
if(valueInHouse.size()==1)return valueInHouse[0];
  vector<int>temp1,temp2;
  for(int i=0;i<valueInHouse.size();i++){
      if(i!=0)temp1.push_back(valueInHouse[i]);
      if(i!=valueInHouse.size()-1)temp2.push_back(valueInHouse[i]);

  }
  return max(maximumNonAdjacentSum(temp1),maximumNonAdjacentSum(temp2));
}
