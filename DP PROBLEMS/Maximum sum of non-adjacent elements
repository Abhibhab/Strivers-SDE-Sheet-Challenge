#include <bits/stdc++.h> 
int helper(int ind,vector<int>&nums,vector<int>&dp){
    if(ind==0)return nums[ind];
    if(ind<0)return 0;
    if(dp[ind]!=-1)return dp[ind];
    int option1=nums[ind]+helper(ind-2,nums,dp);
    int option2=0+helper(ind-1,nums,dp);
    return max(option1,option2);
}
int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
    // vector<int>dp(nums.size(),-1);
    // return helper(nums.size()-1,nums,dp);
    // vector<int>dp(nums.size(),0);
    // dp[0]=nums[0];
    int prev=nums[0];
    int prev2=0;
    for(int ind=1;ind<nums.size();ind++){
    int option1=nums[ind];
    if(ind>=2)
    option1+=prev2;
    int option2=0+prev;
    // dp[ind]=max(option1,option2);
    int curr=max(option1,option2);
    prev2=prev;
    prev=curr;
        
    }
    return prev;

}
