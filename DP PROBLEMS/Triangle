#include <bits/stdc++.h> 
int helper(int i,int j,vector<vector<int>>& triangle){
	if(i==triangle.size()-1)return triangle[i][j];
	int option1=triangle[i][j]+helper(i+1,j,triangle);
	int option2=triangle[i][j]+helper(i+1,j+1,triangle);
	return min(option1,option2);
}
int minimumPathSum(vector<vector<int>>& triangle, int n){
	// Write your code here.
	// return helper(0,0,triangle);
	// vector<vector<int>>dp(n,vector<int>(n,0));
	vector<int>row(n,0);
	for(int i=0;i<n;i++){
		row[i]=triangle[n-1][i];
	}
	for(int i=n-2;i>=0;i--){
		vector<int>cur(n);
	for(int j=i;j>=0;j--){
			
		int option1=triangle[i][j]+row[j];
		int option2=triangle[i][j]+row[j+1];
		cur[j]= min(option1,option2);
		
		}
		row=cur;
			
		}
			return row[0];
	}

