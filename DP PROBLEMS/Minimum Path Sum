#include <bits/stdc++.h> 
int helper(int i,int j,vector<vector<int>> &grid,vector<vector<int>>&dp){
    if(i==0 && j==0)return grid[i][j];
    if(i<0 || j<0)return 1e9;
    if(dp[i][j]!=-1)return dp[i][j];
    int option1=grid[i][j]+helper(i-1,j,grid,dp);
    int option2=grid[i][j]+helper(i,j-1,grid,dp);
    return dp[i][j]=min(option2,option1);
    
}
int minSumPath(vector<vector<int>> &grid) {
    // Write your code here.
    int n=grid.size();
    int m=grid[0].size();
    vector<vector<int>>dp(n,vector<int>(m,-1));
    // return helper(n-1,m-1,grid,dp);
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(i==0 && j==0)dp[i][j]=grid[i][j];
            else{
                int up=1e9,down=1e9;
                if(i>0)up=grid[i][j]+dp[i-1][j];
                if(j>0)down=grid[i][j]+dp[i][j-1];
                dp[i][j]=min(up,down);
            }
            
        }
    }
    return dp[n-1][m-1];
    
}
