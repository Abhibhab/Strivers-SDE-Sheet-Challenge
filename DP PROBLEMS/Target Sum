#include <bits/stdc++.h> 
#include <bits/stdc++.h> 
// int mod=(int)1;
int findWays(vector<int>& arr, int k)
{
	// Write your code here.
	int n=arr.size();
	// vector<vector<int>>dp(n,vector<int>(k+1,-1));
	// return helper(arr.size()-1,k,arr,dp);

	vector<vector<int>>dp(n,vector<int>(k+1,0));
    // for(int i=0;i<n;i++)dp[i][0]=1;    
    if(arr[0] == 0) dp[0][0] =2;  // 2 cases -pick and not pick
    else dp[0][0] = 1;  // 1 case - not pick
    if(arr[0]!=0 && arr[0]<=k) dp[0][arr[0]] = 1;  // 1 case -pick
	for(int index=1;index<n;index++){
		for(int j=0;j<=k;j++){
		
				int option1=0;
				if(j>=arr[index])option1=dp[index-1][j-arr[index]];
				int option2=dp[index-1][j];
				dp[index][j]=(option1+option2);

			
		}
	}
	return dp[n-1][k];
	
}
int countPartitions(int n, int d, vector<int> &arr) {
    // Write your code here.
    int sum=accumulate(arr.begin(),arr.end(),0);
    int need=sum-d;
    if(need%2==1 || need<0)return false;
    return findWays(arr,need/2);
}

int targetSum(int n, int target, vector<int>& arr) {
    return countPartitions(n, target, arr);
}
