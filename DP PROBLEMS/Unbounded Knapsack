#include <bits/stdc++.h> 
int helper(int ind,int w,vector<int> &profit, vector<int> &weight
,   vector<vector<int>>&dp){
    if(ind==0){
        return (w/weight[0])*profit[0];
    }
    if(dp[ind][w]!=-1)return dp[ind][w];
    int nottake=helper(ind-1,w,profit,weight,dp);
    int take=-1e9;
    if(w>=weight[ind])take=profit[ind]+helper(ind,w-weight[ind],
    profit,weight,dp);
    return dp[ind][w]=max(take,nottake);
}
int unboundedKnapsack(int n, int W, vector<int> &val, vector<int> &wt)
{
    // Write Your Code Here.
    // vector<vector<int>>dp(n,vector<int>(w+1,-1));
    // return helper(n-1,w,profit,weight,dp);
        // vector<vector<int>>dp(n,vector<int>(W+1,0));
     
    vector<int> cur(W+1,0);
    
    //Base Condition
    
    for(int i=wt[0]; i<=W; i++){
        cur[i] = ((int)i/wt[0]) * val[0];
    }
    
    for(int ind =1; ind<n; ind++){
        for(int cap=0; cap<=W; cap++){
            
            int notTaken = cur[cap];
            
            int taken = INT_MIN;
            if(wt[ind] <= cap)
                taken = val[ind] + cur[cap - wt[ind]];
                
            cur[cap] = max(notTaken, taken);
        }
    }
    
    return cur[W];


}
