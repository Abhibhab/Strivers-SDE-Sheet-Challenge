#include <bits/stdc++.h> 
vector<int> fun(vector<int>& arr, int n){
			// Write your code here
	vector<int>dp(n,1),hash(n,1);
	// int maixmum=0,lastIndex=0;
	for(int i=0;i<n;i++){
		hash[i]=i;
		for(int prev=0;prev<=i-1;prev++){
			if(arr[prev]<arr[i]){
				if(dp[i]<dp[prev]+1){
					dp[i]=dp[prev]+1;
					hash[i]=prev;
				}
			}
		}
	}
	return dp;
}
vector<int> fun2(vector<int>& arr, int n){
			// Write your code here
	vector<int>dp(n,1),hash(n,1);
	// int maixmum=0,lastIndex=0;
	for(int i=n-1;i>=0;i--){
		hash[i]=i;
		for(int prev=n-1;prev>i;prev--){
			if(arr[prev]<arr[i]){
				if(dp[i]<dp[prev]+1){
					dp[i]=dp[prev]+1;
					hash[i]=prev;
				}
			}
		}
	}
	return dp;
}
int longestBitonicSequence(vector<int>& arr, int n) {
	  // Write your code here.	
	  vector<int>dp1,dp2;
	  dp1=fun(arr,n);
	//   reverse(arr.begin(),arr.end());
	  dp2=fun2(arr,n);
	  int ans=-1;
	  for(int i=0;i<n;i++){
		  ans=max(ans,(dp1[i]+dp2[i]-1));
		  
	  }   
	  return ans;
	  
} 
