class Solution {
public:
    int helper(int ind1,int ind2,string word1, string word2, vector<vector<int>>&dp){
        if(ind1==0)return ind2;
        if(ind2==0)return ind1;
        if(dp[ind1][ind2]!=-1)return dp[ind1][ind2];
        if(word1[ind1-1]==word2[ind2-1])return dp[ind1][ind2]=helper(ind1-1,ind2-1,word1,word2,dp);
        else{
            return dp[ind1][ind2]=(1+min({helper(ind1-1,ind2,word1,word2,dp),
            helper(ind1,ind2-1,word1,word2,dp),
            helper(ind1-1,ind2-1,word1,word2,dp)}));
            //CASES-INSERT,DELETE,REPACE
        }


    }

    int minDistance(string word1, string word2) {
        int n=word1.size();
        int m=word2.size();
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        // return helper(n,m,word1,word2,dp);
        for(int i=0;i<=m;i++){
            dp[0][i]=i;
        }
        for(int i=0;i<=n;i++){
            dp[i][0]=i;
        }
        for(int ind1=1;ind1<=n;ind1++){
            for(int ind2=1;ind2<=m;ind2++){
                 if(word1[ind1-1]==word2[ind2-1]) dp[ind1][ind2]=dp[ind1-1][ind2-1];
        else{
            dp[ind1][ind2]=(1+min({dp[ind1-1][ind2],
            dp[ind1][ind2-1],
            dp[ind1-1][ind2-1]}));
            //CASES-INSERT,DELETE,REPACE
        }

            }
        }
        return dp[n][m];

        
    }
};
