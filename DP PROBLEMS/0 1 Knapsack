#include <bits/stdc++.h> 
int helper(int ind,vector<int> weight, vector<int> value, int W,
vector<vector<int>>&dp){
	if(ind==0){
		if(W>=weight[0])return value[0];
		else return 0;
	}
	if(dp[ind][W]!=-1)return dp[ind][W];
	int nottake=0+helper(ind-1,weight,value,W,dp);
	int take=INT_MIN;
	if(weight[ind]<=W)take=value[ind]+helper(ind-1,weight,value,
	W-weight[ind],dp);
	return dp[ind][W]=max(take,nottake);
}
int knapsack(vector<int> weight, vector<int> value, int n, int We) 
{
	// Write your code here
	// vector<vector<int>>dp(n,vector<int>(maxWeight+1,-1));
	// return helper(n-1,weight,value,maxWeight,dp);
	vector<vector<int>>dp(n,vector<int>(We+1,0));
	for(int i=weight[0];i<=We;i++)dp[0][i]=value[0];
	for(int ind =1;ind<n;ind++){
		for(int W=0;W<=We;W++){
			int nottake=0+dp[ind-1][W];
	int take=INT_MIN;
	if(weight[ind]<=W)take=value[ind]+dp[ind-1][W-weight[ind]];
dp[ind][W]=max(take,nottake);

		}
	}
	// for(int w=weight[0];w<=We;w++)dp[0][w]=value[0];
	// for(int ind=1;ind<n;ind++){
	// 	for(int W=0;W<=We;W++){
	// 			int nottake=0+dp[ind-1][W];
	// int take=INT_MIN;
	// if(weight[ind]<=W)take=value[ind]+dp[ind-1][W-weight[ind]];
	// return dp[ind][W]=max(take,nottake);

	// 	}
	// }
	return dp[n-1][We];

}
