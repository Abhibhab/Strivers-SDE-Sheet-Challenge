#include <bits/stdc++.h>    
long helper(int ind,int val,int*denominations,   vector<vector<long>>&dp){
    if(ind==0){
        return ((val%denominations[0])==0);
    }
    if(dp[ind][val]!=-1)return dp[ind][val];
   long nottake=helper(ind-1,val,denominations,dp);
   long take=0;
    if(denominations[ind]<=val)take=helper(ind,
    val-denominations[ind],denominations,dp);
    return dp[ind][val]=take+nottake;
}

long countWaysToMakeChange(int *denominations, int n, int value)
{
    //Write your code here
    // vector<vector<long>>dp(n,vector<long>(value+1,-1));
    // return helper(n-1,value,denominations,dp);

        // vector<vector<long>>dp(n,vector<long>(value+1,0));
        vector<long>prev(value+1),curr(value+1);

        for(int val=0;val<=value;val++){
            if(val%denominations[0]==0){
                prev[val]=1;
            }

        }
        for(int ind=1;ind<n;ind++){
            for(int val=0;val<=value;val++){
                    // if(dp[ind][val]!=-1)return dp[ind][val];
   long nottake=prev[val];
   long take=0;
    if(denominations[ind]<=val)take=curr[val-denominations[ind]];
    curr[val]=take+nottake;


            }
            prev=curr;
        }
        return prev[value];

}
