#include <bits/stdc++.h>
int helper(int ind,int prev,int arr[],int n,vector<vector<int>>&dp){
    if(ind==n)return 0;
    if(dp[ind][prev+1]!=-1)return dp[ind][prev+1];
    if(prev==-1||arr[ind]>arr[prev]){
        int take=1+helper(ind+1,ind,arr,n,dp);
        int nottake=helper(ind+1,prev,arr,n,dp);
        return dp[ind][prev+1]=max(take,nottake);

    }else{
        return dp[ind][prev+1]=helper(ind+1,prev,arr,n,dp);

    }
}
int longestIncreasingSubsequence(int arr[], int n)
{
    // Write Your Code here
    // vector<vector<int>>dp(n,vector<int>(n+1,-1));

    // return helper(0,-1,arr,n,dp);

    //    vector<vector<int>> dp(n+1,vector<int>(n+1,0));
    
    // for(int ind = n-1; ind>=0; ind --){
    //     for (int prev_index = ind-1; prev_index >=-1; prev_index --){
            
    //         int notTake = 0 + dp[ind+1][prev_index +1];
    
    //         int take = 0;
    
    //         if(prev_index == -1 || arr[ind] > arr[prev_index]){
                
    //             take = 1 + dp[ind+1][ind+1];
    //         }
    
    //         dp[ind][prev_index+1] = max(notTake,take);
            
    //     }
    // }
    
    // return dp[0][0];
   vector<int>temp;
   temp.push_back(arr[0]);
   for(int i=1;i<n;i++){
       if(arr[i]>temp.back()){
           temp.push_back(arr[i]);
       }else{
           int ind=lower_bound(temp.begin(),temp.end(),arr[i])-temp.begin();
           temp[ind]=arr[i];
       }
   }
   return temp.size();

    
}
