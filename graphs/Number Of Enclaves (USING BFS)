//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
    void bfs(int x,int y,vector<vector<int>>&grid,vector<vector<int>>&vis){
        queue<pair<int,int>>que;
        vis[x][y]=1;
        que.push({x,y});
        int n=grid.size();
        int m=grid[0].size();
        int dx[4]={0,0,-1,1};
        int dy[4]={-1,1,0,0};
        while(!que.empty()){
            auto ele=que.front();
            que.pop();
            int xx=ele.first;
            int yy=ele.second;
            for(int i=0;i<4;i++){
                int nx=xx+dx[i];
                int ny=yy+dy[i];
                if(nx>=0  && ny>=0 && nx<n && ny<m && grid[nx][ny]==1 && vis[nx][ny]==0){
                    que.push({nx,ny});
                    vis[nx][ny]=1;
                }
            }
        }
    }
    int numberOfEnclaves(vector<vector<int>> &grid) {
        // Code here
        int n=grid.size();
        int m=grid[0].size();
        
        vector<vector<int>>vis(n,vector<int>(m,0));
        for(int i=0;i<n;i++){
            if(vis[i][0]==0 and grid[i][0]==1){
                bfs(i,0,grid,vis);
            }
            if(vis[i][m-1]==0 and grid[i][m-1]==1){
                bfs(i,m-1,grid,vis);
            }
        }
        for(int i=0;i<m;i++){
            if(vis[0][i]==0 and grid[0][i]==1){
                bfs(0,i,grid,vis);
            }
            if(vis[n-1][i]==0 && grid[n-1][i]==1){
                bfs(n-1,i,grid,vis);
            }
        }
        int count=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1 && vis[i][j]==0)count++;
                
            }
        }
        return count;
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> grid(n, vector<int>(m));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        cout << obj.numberOfEnclaves(grid) << endl;
    }
}
// } Driver Code Ends
