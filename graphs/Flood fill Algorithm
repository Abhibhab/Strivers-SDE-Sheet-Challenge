
//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
public:
int dx[4]={-1,1,0,0};
int dy[4]={0,0,-1,1};
void dfs(int nx,int ny,vector<vector<int>>& image,int newColor,int prevcol,int n,int m){
    // if()return;
     if(nx<0 || ny<0 || nx>=n || ny>=m || image[nx][ny]!=prevcol)return;
    image[nx][ny]=newColor;
    for(int i=0;i<4;i++){
        int indx=nx+dx[i];
        int indy=ny+dy[i];
       
        dfs(indx,indy,image,newColor,prevcol,n,m);
    }
}
    // for(int i=-1;i<=1;i++){
    //     for(int j=-1;j<=1;j++){
    //         int nx=indx+i;
    //         int ny=indy+j;
            
    //     }
    // }

    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        // Code here 
        
        int color=image[sr][sc];
        // if(newColor==color)return image;
        vector<vector<int>>ans=image;
        int n=image.size();
        int m=image[0].size();
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<m;j++){
                // if(ans[i][j]==color){
                    // if(image[sr][sc]!=newColor)
                    dfs(sr,sc,ans,newColor,color,n,m);
        //         }
                
        //     }
        // }
        return ans;
    }
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<int>>image(n, vector<int>(m,0));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++)
				cin >> image[i][j];
		}
		int sr, sc, newColor;
		cin >> sr >> sc >> newColor;
		Solution obj;
		vector<vector<int>> ans = obj.floodFill(image, sr, sc, newColor);
		for(auto i: ans){
			for(auto j: i)
				cout << j << " ";
			cout << "\n";
		}
	}
	return 0;
}
// } Driver Code Ends
